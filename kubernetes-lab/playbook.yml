---
- hosts: all
  become: true
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ https_packages }}"
        state: present
        update_cache: yes
      vars:
        https_packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - gnupg-agent
        - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install Docker and its dependencies
      apt: 
        name: "{{ docker_packages }}"
        state: present
        update_cache: yes
      vars:
        docker_packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Create directory for Kubernetes apt keyring
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download the public signing key for Kubernetes package repositories
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        dest: /tmp/Release.key
        force: no
      register: kubernetes_key

    - name: Convert the key to GPG format
      command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/Release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      when: kubernetes_key.changed

    - name: Add apt repository for Kubernetes
      command: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list
      args:
        creates: /etc/apt/sources.list.d/kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ kubernetes_packages }}"
        state: present
        update_cache: yes
      vars:
        kubernetes_packages:
        - kubelet 
        - kubeadm 
        - kubectl
      notify:
        - kubelet status

  handlers:
    - name: docker status
      service:
        name: docker
        state: started

    - name: kubelet status
      service:
        name: kubelet
        state: started

- hosts: k8s-master
  become: true
  tasks:
    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ ansible_default_ipv4.address }}" --apiserver-cert-extra-sans="{{ ansible_default_ipv4.address }}" --node-name k8s-master --pod-network-cidr=192.168.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Create kube directory
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    - name: Copy kubeconfig file to master node
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        mode: '0644'
        owner: root
        group: root

    - name: Install calico pod network
      become: false
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
      args:
        creates: /etc/calico/calico.yaml

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      args:
        creates: /tmp/join-command

    - name: Copy join command to local file
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/join-command.sh"
        mode: '0777'

    - name: Copy the join command to server location
      copy:
        remote_src: no
        src: join-command
        dest: /tmp/join-command.sh
        mode: '0777'

- hosts: k8s-nodes
  become: true
  tasks:
    - name: Copy the join command to node
      copy:
        src: /tmp/join-command.sh
        dest: /tmp/join-command.sh
        mode: '0777'
        remote_src: no

    - name: Join the node to the cluster
      command: sh /tmp/join-command.sh
      args:
        creates: /etc/kubernetes/kubelet.conf
